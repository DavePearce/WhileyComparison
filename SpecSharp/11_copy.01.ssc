// Status: not verified
class Example {
  public int[] copy(int[]! src, int sStart, int[]! dest, int dStart, int len)
    // Source array must contain enough elements to be copied
    requires src.Length >= sStart + len;
    // Destination array must have enough space for copied elements
    requires dest.Length >= dStart + len;
    // Result is same size as dest
    requires len >= 0 && sStart >= 0 && dStart >= 0;
    ensures result.Length == dest.Length;
    // All elements before copied region are same
    ensures forall { k in (0:dStart); result[k] == dest[k] };
    // All elements above copied region are same
    ensures forall { k in (dStart + len:dest.Length); result[k] == dest[k] };
    // All elements in copied region match src
    ensures forall { j in (dStart:(dStart + len)),k in (sStart:(sStart + len));
                    result[j] == src[k] };
  {
    if (len == 0) { return dest; }
    assert len > 0;
    int i = 0;
    int[]! r = new int[dest.Length];
    
    while (i < r.Length)
      invariant 0 <= i && i <= r.Length;
      invariant r.Length == dest.Length;
      invariant forall { k in (0:i); r[k] == dest[k] };
    {
      r[i] = dest[i];
      ++i;
    }
    assert i > 0;
    assert forall { k in (0:r.Length); r[k] == dest[k] };
    i = 0;
    while (i < len)
      invariant 0 <= i && i <= len;
      invariant forall { k in (0:dStart); r[k] == dest[k] };
      invariant forall { j in (dStart:(dStart + i)),k in (sStart:(sStart + i));
                        r[j] == src[k] };
      invariant forall { k in (dStart + len:dest.Length); r[k] == dest[k] };
    {
      r[dStart + i] = src[sStart + i];
      ++i;
    }
    return r;
  }
}