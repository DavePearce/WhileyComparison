// Status: not verified
// rotates a region of the array by one place forward
class Example {
  public int[] displace( int[]! arr, int start, int len)
  requires len > 0 && start > 0;
  requires start + len <= arr.Length;
  ensures forall { k in (0:start); arr[k] == result[k] };
  ensures forall { k in ((start + len):arr.Length); arr[k] == result[k] };
  ensures result[start] == arr[start + len - 1];
  ensures forall { k in (start:(start + len - 1)); result[k + 1] == arr[k] };
  {
    int i = 0;
    int[]! r = new int[arr.Length];
    while (i < start)
      invariant 0 <= i && i <= start;
    invariant forall { k in (0:i); r[k] == arr[k] };
    {
      r[i] = arr[i];
      ++i;
    }
    assert forall { k in (0:start); arr[k] == r[k] };
    r[start] = arr[start+len-1];
    assert r[start] == arr[start+len-1];
    
    i = start+1;
    while (i < start + len)
      invariant start < i && i <= start+len;
    invariant forall { k in (0:start); arr[k] == r[k] };
    invariant r[start] == arr[start+len-1];
    invariant forall { k in (start:(i - 1)); r[k + 1] == arr[k] };
    {
      r[i] = arr[i - 1];
      ++i;
    }
    assert forall { k in (start:(start + len - 1)); r[k + 1] == arr[k] };
    
    i = start+len;
    while (i < arr.Length)
      invariant start+len <= i && i <= arr.Length;
    invariant forall { k in (0:start); arr[k] == r[k] };
    invariant forall { k in (start:(start + len - 1)); r[k + 1] == arr[k] };
    invariant forall { k in (start+len:i); r[k] == arr[k] };
    {
      r[i] = arr[i];
      ++i;
    }
    return r;
  }
}
