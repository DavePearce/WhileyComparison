// Insertion sort

//using displace; // wrong
//using find; // wrong

class Sort {
  public int[] insertSort(int[]! arr)
    ensures arr.Length == result.Length
    ensures forall { j in (0:arr.Length), k in (j:arr.Length); result[j] <= result[k] };
  {
    int i = 0;
    int pos = 0;
    int[] r = new int[arr.Length];
    
    while (i < r.Length)
      invariant i <= r.Length;
      invariant forall { k in (0:i) ; r[k] == arr[k] };
    {
      r[i] = arr[i];
      i = i + 1;
    }
    
    assert forall { k in (0:r.Length) ; r[k] == arr[k] };
    i = 0;
    
    while (i < r.Length)
      invariant i <= r.Length;
      invariant arr.Length == r.Length;
      invariant requires forall{ j in (0:i), k in (j:i); arr[j] <= arr[k] };
    {
      pos = findIns(r, r[i], i);
      ++i;
      r = displace(r, pos, i - pos);
    }
    return r;
  }
}