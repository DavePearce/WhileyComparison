// Status: verifies and compiles
class Example {
  public int BinarySearch(int[]! arr, int key)
    requires forall { i in (0:arr.Length), j in (i:arr.Length);
                    arr[i] <= arr[j] };
    ensures -1 <= result && result < arr.Length;
    ensures 0 <= result ==> arr[result] == key;
    ensures result == -1 ==> forall { i in (0: arr.Length);
                             arr[i] != key };
  {
    int low = 0;
    int high = arr.Length;
    while (low < high)
      invariant 0 <= low && high <= arr.Length;
      invariant forall { i in (0:low); arr[i] < key };
      invariant forall { i in (high:arr.Length); key < arr[i] };
    {
      int mid = low + (high - low) / 2;
      int midVal = arr[mid];
      if (midVal < key)
      { low = mid + 1; }
      else if (key < midVal)
      { high = mid; }
      else
      { return mid; } // key found
    }
    // key not present
    return -1;
  }
}
 