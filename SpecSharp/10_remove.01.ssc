// Status: verifies and compiles
class Example {
  public int[] remove( int[]! items, int index)
    requires 0 <= index && index < items.Length;
    requires items.Length > 0;
    ensures result.Length == items.Length - 1;
    ensures forall { k in (0:index); result[k] == items[k] };
    ensures forall { k in (index:result.Length); result[k] == items[k + 1] };
  {
    // length of the new array
    int newlen = items.Length - 1;
    int[] r = new int[newlen];
    int i = 0;
    
    while (i < index)
      // items before index in result are still the same
      invariant 0 <= i && i <= index;
      invariant r.Length == newlen;
      invariant forall { k in (0:i); k < index ==> r[k] == items[k] };
    {
      r[i] = items[i];
      ++i;
    }
    assert i == index;
    while (i < newlen)
      // items after index in result are transposed by one place
      invariant index <= i && i <= newlen;
      invariant r.Length == newlen;
      invariant forall { k in (0:index); r[k] == items[k] };
      invariant forall { k in (index:i); r[k] == items[k + 1] };
    {
      r[i] = items[i + 1];
      ++i;
    }
    return r;
  }
}