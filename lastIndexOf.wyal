define lastIndexOf_ensures_0(int r0, [int] r1, int r2) is:
    case:
        r0 < 0
        true
    case:
        r0 >= 0
        r1[r0] == r2
        true
    true

define lastIndexOf_ensures_1(int r0, [int] r1, int r2) is:
    case:
        r0 < 0
        true
    case:
        r0 >= 0
        true
        forall (int r4$1):
            if:
                (r0 + 1) <= r4$1
                r4$1 < |r1|
            then:
                r0 >= 0
                true
                true
                r1[r4$1] != r2
        true
    true

define lastIndexOf_ensures_2(int r0, [int] r1, int r2) is:
    case:
        r0 >= 0
        true
    case:
        r0 < 0
        true
        forall (int r4$1):
            if:
                0 <= r4$1
                r4$1 < |r1|
            then:
                r0 < 0
                true
                true
                r1[r4$1] != r2
        true
    true

function lastIndexOf([int] r0, int r1) -> (int)

define lastIndexOf_loopinvariant_3_0([int] r0, int r1, int r2) is:
    r2 <= |r0|

define lastIndexOf_loopinvariant_3_1([int] r0, int r1, int r2) is:
    forall (int r6$1):
        if:
            r2 <= r6$1
            r6$1 < |r0|
        then:
            r0[r6$1] != r1

assert "loop invariant does not hold on entry":
    forall (int item, [int] items):
        if:
            true
        then:
            lastIndexOf.lastIndexOf_loopinvariant_3_0(items, item, |items|)


assert "loop invariant does not hold on entry":
    forall (int item, [int] items):
        if:
            true
        then:
            lastIndexOf.lastIndexOf_loopinvariant_3_1(items, item, |items|)


assert "index out of bounds (negative)":
    forall (int item, int i$2, [int] items):
        if:
            lastIndexOf.lastIndexOf_loopinvariant_3_0(items, item, i$2)
            lastIndexOf.lastIndexOf_loopinvariant_3_1(items, item, i$2)
            i$2 > 0
        then:
            (i$2 - 1) >= 0


assert "index out of bounds (not less than length)":
    forall (int item, int i$2, [int] items):
        if:
            lastIndexOf.lastIndexOf_loopinvariant_3_0(items, item, i$2)
            lastIndexOf.lastIndexOf_loopinvariant_3_1(items, item, i$2)
            i$2 > 0
        then:
            (i$2 - 1) < |items|


assert "loop invariant not restored":
    forall (int item, int i$2, [int] items):
        if:
            lastIndexOf.lastIndexOf_loopinvariant_3_0(items, item, i$2)
            lastIndexOf.lastIndexOf_loopinvariant_3_1(items, item, i$2)
            i$2 > 0
            true
            items[i$2 - 1] != item
        then:
            lastIndexOf.lastIndexOf_loopinvariant_3_0(items, item, i$2 - 1)


assert "loop invariant not restored":
    forall (int item, int i$2, [int] items):
        if:
            lastIndexOf.lastIndexOf_loopinvariant_3_0(items, item, i$2)
            lastIndexOf.lastIndexOf_loopinvariant_3_1(items, item, i$2)
            i$2 > 0
            true
            items[i$2 - 1] != item
        then:
            lastIndexOf.lastIndexOf_loopinvariant_3_1(items, item, i$2 - 1)


assert "postcondition not satisfied":
    forall (int item, int i$2, [int] items):
        if:
            lastIndexOf.lastIndexOf_loopinvariant_3_0(items, item, i$2)
            lastIndexOf.lastIndexOf_loopinvariant_3_1(items, item, i$2)
            i$2 <= 0
            -1 is int
        then:
            lastIndexOf.lastIndexOf_ensures_0(-1, items, item)


assert "postcondition not satisfied":
    forall (int item, int i$2, [int] items):
        if:
            lastIndexOf.lastIndexOf_loopinvariant_3_0(items, item, i$2)
            lastIndexOf.lastIndexOf_loopinvariant_3_1(items, item, i$2)
            i$2 <= 0
            -1 is int
        then:
            lastIndexOf.lastIndexOf_ensures_1(-1, items, item)


assert "postcondition not satisfied":
    forall (int item, int i$2, [int] items):
        if:
            lastIndexOf.lastIndexOf_loopinvariant_3_0(items, item, i$2)
            lastIndexOf.lastIndexOf_loopinvariant_3_1(items, item, i$2)
            i$2 <= 0
            -1 is int
        then:
            lastIndexOf.lastIndexOf_ensures_2(-1, items, item)


assert "postcondition not satisfied":
    forall (int item, int i$2, [int] items):
        if:
            lastIndexOf.lastIndexOf_loopinvariant_3_0(items, item, i$2)
            lastIndexOf.lastIndexOf_loopinvariant_3_1(items, item, i$2)
            i$2 > 0
            true
            items[i$2 - 1] == item
            (i$2 - 1) is int
        then:
            lastIndexOf.lastIndexOf_ensures_0(i$2 - 1, items, item)


assert "postcondition not satisfied":
    forall (int item, int i$2, [int] items):
        if:
            lastIndexOf.lastIndexOf_loopinvariant_3_0(items, item, i$2)
            lastIndexOf.lastIndexOf_loopinvariant_3_1(items, item, i$2)
            i$2 > 0
            true
            items[i$2 - 1] == item
            (i$2 - 1) is int
        then:
            lastIndexOf.lastIndexOf_ensures_1(i$2 - 1, items, item)


assert "postcondition not satisfied":
    forall (int item, int i$2, [int] items):
        if:
            lastIndexOf.lastIndexOf_loopinvariant_3_0(items, item, i$2)
            lastIndexOf.lastIndexOf_loopinvariant_3_1(items, item, i$2)
            i$2 > 0
            true
            items[i$2 - 1] == item
            (i$2 - 1) is int
        then:
            lastIndexOf.lastIndexOf_ensures_2(i$2 - 1, items, item)


